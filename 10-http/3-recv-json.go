package main

import (
	"encoding/json"
	"net/http"
)

// https://mholt.github.io/json-to-go/
/*
{
    "glossary": {
        "title": "example glossary",
		"GlossDiv": {
            "title": "S",
			"GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
					"SortAs": "SGML",
					"GlossTerm": "Standard Generalized Markup Language",
					"Acronym": "SGML",
					"Abbrev": "ISO 8879:1986",
					"GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
						"GlossSeeAlso": ["GML", "XML"]
                    },
					"GlossSee": "markup"
                }
            }
        }
    }
}
*/

type AutoGenerated struct {
	Glossary Glossary `json:"glossary"`
}
type GlossDef struct {
	Para         string   `json:"para"`
	GlossSeeAlso []string `json:"GlossSeeAlso"`
}
type GlossEntry struct {
	ID        string   `json:"ID"`
	SortAs    string   `json:"SortAs"`
	GlossTerm string   `json:"GlossTerm"`
	Acronym   string   `json:"Acronym"`
	Abbrev    string   `json:"Abbrev"`
	GlossDef  GlossDef `json:"GlossDef"`
	GlossSee  string   `json:"GlossSee"`
}
type GlossList struct {
	GlossEntry GlossEntry `json:"GlossEntry"`
}
type GlossDiv struct {
	Title     string    `json:"title"`
	GlossList GlossList `json:"GlossList"`
}
type Glossary struct {
	Title    string   `json:"title"`
	GlossDiv GlossDiv `json:"GlossDiv"`
}

func main() {
	http.HandleFunc("/process-json", processJson)
	http.ListenAndServe(":8080", nil)
	// start http server
	// create one route to receive json data
	//
}

func processJson(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	var data AutoGenerated

	err := json.NewDecoder(r.Body).Decode(&data)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.Write([]byte(`{"status": "ok"}`))

}

/*
curl -X POST "http://localhost:8080/process-json" \
  -H "Content-Type: application/json" \
  -d '{
    "glossary": {
      "title": "example glossary",
      "GlossDiv": {
        "title": "S",
        "GlossList": {
          "GlossEntry": {
            "ID": "SGML",
            "SortAs": "SGML",
            "GlossTerm": "Standard Generalized Markup Language",
            "Acronym": "SGML",
            "Abbrev": "ISO 8879:1986",
            "GlossDef": {
              "para": "A meta-markup language, used to create markup languages such as DocBook.",
              "GlossSeeAlso": ["GML", "XML"]
            },
            "GlossSee": "markup"
          }
        }
      }
    }
  }'
*/
